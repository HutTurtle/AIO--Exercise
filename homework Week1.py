# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gocghgpphbKeCsBcfS_bb5q6EU3Sc-nL
"""



# Homework 1
import math
def calc_f1_score(tp,fp,fn):

    precision = tp/(tp+fp)
    recall = tp/(tp+fn)
    f1_score = 2*(precision*recall)/(precision+recall)

    if type(tp) != int:
      print('tp must be int')
      return
    if type(fp) != int:
      print('fp must be int')
      return
    if type(fn) != int:
      print('fn must be int')
      return
    if tp < 0 or fp < 0 or fn < 0:
      print('tp,fp,fn must be greater than 0')
      return

    return f1_score
print(calc_f1_score(2.5,1,1))

# Homework 2
import math
def is_number(x):
  try:
    float(x)
  except ValueError:
    print('x must be a number')
    return False
  return True


def sigmoid(x):
  sigmoid = 1/(1+math.exp(-x))
  return sigmoid


def relu(x):
  if x > 0:
    return x
  else:
    return 0

def elu(x):
  if x > 0:
    return x
  else:
    return 0.01*math.exp(x)-1

def activation_function(x, name):
  if name == 'sigmoid':
    print(sigmoid(x))
  elif name == 'elu':
    print(elu(x))
  elif name == 'relu':
    print(relu(x))
  else:
    print('name must be sigmoid, elu, or relu')

print(is_number(-4.2))
print(activation_function(-4.2,'elu'))

"""import math
def is_number(n):
  try:
    float(n)
    return False
    except valueError:
      return True
assert is_number(3) == 1.0
assert is_number('-2a') == 0.0
print(is_number(1))
print(is_number('n'))
  
       


"""

# Homework 3
import random
import math

def calc_MAE(n):
  mae = 0
  for i in range (n):
    y = random.uniform(0,10)
    y_hat = random.uniform(0,10)
    mae += abs(y-y_hat)
  return mae/n
def calc_MSE(n):
    mse = 0
    for i in range (n):
      y = random.uniform(0,10)
      y_hat = random.uniform(0,10)
      mse += (y-y_hat)**2
    return mse/n
def calc_RMSE(n):
      rmse = 0
      for i in range (n):
        y = random.uniform(0,10)
        y_hat = random.uniform(0,10)
        rmse += (y-y_hat)**2
      return math.sqrt(rmse/n)

print(calc_MSE(10))

# Homework 4
import math
def factorial_iterative(n):
    result = 1
    for i in range(n):
        result *= (i+1)
    return result

def Sin(x,n):
  sin = 0
  for i in range (n+1):
    ms = (-1)**i
    num = x**(2*i+1)
    denon = factorial_iterative(2*i+1)
    sin += ms*(num/denon)
  return sin
print(Sin(math.pi,2))

def Cos(x,n):
  cos = 0
  for i in range (n+1):
    ms = (-1)**i
    num = x**(2*i)
    denon = factorial_iterative(2*i)
    cos += ms*(num/denon)
  return cos
print(Cos(math.pi,2))

def Sinh(x,n):
  sinh = 0
  for i in range (n+1):
    ms = (-1)**i
    num = x**(2*i+1)
    denon = factorial_iterative(2*i+1)
    sinh += ms*(num/denon)
  return sinh
print(Sinh(math.pi,2))
def Cosh(x,n):
  cosh = 0
  for i in range (n+1):
    ms = (-1)**i
    num = x**(2*i)
    denon = factorial_iterative(2*i)
    cosh += ms*(num/denon)
  return cosh
print(Cosh(math.pi,2))

